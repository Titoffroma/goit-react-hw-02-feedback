{"version":3,"sources":["Components/FeedbackOptions/index.jsx","Components/FeedbackBtn/index.jsx","Components/Statistics/index.jsx","Components/FeedbackCard/index.jsx","Components/Title/index.jsx","Components/Section/index.jsx","Components/Notification/index.jsx","Components/Feedback/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","styled","div","FeedbackBtn","button","StatValue","span","FeedbackLi","li","FeedbackUl","ul","FeedbackItem","statName","val","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackCard","Title","h1","attrs","title","props","fontSize","propTypes","PropTypes","string","isRequired","Section","Notification","message","Feedback","state","perc","handleClick","e","target","currentTarget","setState","dataset","stat","Number","nextProps","nextState","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","onClick","data-stat","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3311927c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst FeedbackOptions = styled.div`\r\n padding: 15px 0; \r\n`\r\nexport default FeedbackOptions;","import styled from 'styled-components';\r\n\r\nconst FeedbackBtn = styled.button`\r\n background: white;\r\n color: #717171;\r\n font-size: 12px;\r\n font-weight: bold;\r\n padding: 4px 10px;\r\n border: 1px solid #212121;\r\n border-radius: 4px;\r\n box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.4);\r\n &:hover {\r\n     color: #212121;\r\n }\r\n &:focus {\r\n     outline: none;\r\n     border: 1px solid #212121;\r\n }\r\n &:active {\r\n     box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);\r\n }\r\n &:not(:last-child) {\r\n     margin-right: 8px;\r\n }\r\n`\r\nexport default FeedbackBtn;","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StatValue = styled.span`\r\n  font-weight: bold;\r\n`\r\nconst FeedbackLi = styled.li`\r\n  color: #212121;\r\n  font-size: 14px;\r\n  padding: 2px 0;\r\n`\r\nconst FeedbackUl = styled.ul`\r\n list-style-type: none;\r\n`\r\nconst FeedbackItem = ({statName, val}) => (\r\n  <FeedbackLi>{statName}: <StatValue children={val}/></FeedbackLi>\r\n)\r\n\r\nFeedbackItem.propTypes = {\r\n  statName: PropTypes.string.isRequired,\r\n  val: PropTypes.number.isRequired,\r\n}\r\n\r\nconst Statistics= ({ good, neutral, bad, total, positivePercentage}) => {\r\n  return (<FeedbackUl>\r\n    <FeedbackItem statName=\"Good\" val={good} />\r\n    <FeedbackItem statName=\"Neutral\" val={neutral} />\r\n    <FeedbackItem statName=\"Bad\" val={bad} />\r\n    <FeedbackItem statName=\"Total\" val={total} />\r\n    <FeedbackItem statName=\"Positive feedback\" val={positivePercentage} />\r\n    </FeedbackUl>)\r\n}\r\n\r\nexport default Statistics;","import styled from 'styled-components';\r\n\r\nconst FeedbackCard = styled.div`\r\n width: 380px;\r\n margin: 0 auto;\r\n padding: 15px;\r\n background: pink;\r\n border-radius: 10px;\r\n box-shadow: 4px 2px 12px rgba(0, 0, 0, 0.8) \r\n`\r\nexport default FeedbackCard;","import PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled.h1.attrs(({title}) => ({\r\n    children: title || '',\r\n}))`\r\n color: #212121;\r\n font-size: ${props => props.fontSize || 22}px;\r\n font-weight: bold;\r\n`\r\nTitle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Title;","import Title from '../Title';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <>\r\n            <Title title={title} />\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Section;","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = styled.span.attrs(({ message }) => ({\r\n    children: message,\r\n}))`\r\ncolor: #212121;\r\n` \r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n}\r\n\r\nexport default Notification;","import React, { Component } from 'react';\r\nimport FeedbackOptions from '../FeedbackOptions';\r\nimport FeedbackBtn from '../FeedbackBtn';\r\nimport Statistics from '../Statistics';\r\nimport FeedbackCard from '../FeedbackCard';\r\nimport Section from '../Section';\r\nimport Notification from '../Notification';\r\n\r\nexport default class Feedback extends Component {\r\n    state = {\r\n     good: 0,\r\n     neutral: 0,\r\n     bad: 0\r\n    }\r\n\r\n    total = 0;\r\n\r\n    perc = 0;\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        this.countTotalFeedback(nextState);\r\n        this.countPositiveFeedbackPercentage(nextState);\r\n        if (this.total) return true;\r\n        return false;\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        if (e.target === e.currentTarget) return;\r\n        this.setState(state => ({\r\n            [e.target.dataset.stat]: Number(state[e.target.dataset.stat]) + 1,\r\n        }))\r\n    }\r\n\r\n    countTotalFeedback(state) {\r\n        this.total = 0;\r\n        for (let val in state) {\r\n            this.total += state[val];\r\n        }\r\n        return this.total;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage(state) {\r\n        this.perc = Math.round(Number((state.good / (this.total - state.neutral)) || 0) * 100);\r\n        return `${this.perc}%`;\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <FeedbackCard>\r\n            <Section title=\"Please leave a feedback\">\r\n              <FeedbackOptions onClick={this.handleClick}>\r\n                <FeedbackBtn data-stat=\"good\" children=\"Good\" />\r\n                <FeedbackBtn data-stat=\"neutral\" children=\"Neutral\" />\r\n                <FeedbackBtn data-stat=\"bad\" children=\"Bad\"/>\r\n              </FeedbackOptions>\r\n            </Section>\r\n            <Section title=\"Statistics\">\r\n                {this.total ?\r\n                    <Statistics good={this.state.good} neutral={this.state.neutral}\r\n                        bad={this.state.bad} total={this.total}\r\n                        positivePercentage={this.perc} /> :\r\n                    <Notification message=\"No feedback given\"/>\r\n                }\r\n            </Section>\r\n        </FeedbackCard>\r\n      )\r\n    }\r\n}\r\n","import Feedback from \"./Components/Feedback\";\n\nfunction App() {\n  return <Feedback />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}